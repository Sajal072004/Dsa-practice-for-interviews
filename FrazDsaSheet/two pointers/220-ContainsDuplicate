//brute force

class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        int n = nums.size();
        unordered_set<int>st(nums.begin() , nums.end());
        if(t == 0 && n == st.size()) return false;
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<i+k+1; j++){
                if(j>=n) break;
                if(abs(nums[i] - nums[j]) <= t) return true;
            }
        }
        return false;
    }
};


//optimised 

class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
    set<int> window ;  
    for (int i = 0; i < nums.size(); i++) {
        if (i > k) window.erase(nums[i-k-1]); 
        auto pos = window.lower_bound(nums[i] - t);  
        if (pos != window.end() && *pos - nums[i] <= t) return true;
        window.insert(nums[i]);
    }
    return false;
}
};